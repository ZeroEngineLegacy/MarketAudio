// This script adds particle emitters for each bar and beat of a music cue.
// The beats per minute and time signature must be set on the SoundCue.
class BeatParticles : ZilchComponent
{
  // This script requires a SimpleSound component on the same object, with a valid SoundCue
  // The SimpleSound's StartPlaying property should NOT be checked
  [Dependency]
  var SimpleSound : SimpleSound;
  
  // Used to store the SoundInstance so we can continue to get events from it
  var Instance : SoundInstance;
  
  var BeatParticles : Cog;
  var BarParticles : Cog;
  
  function Initialize(init : CogInitializer)
  {
    // Play the SimpleSound and store the SoundInstance
    this.Instance = this.SimpleSound.Play();
    // Connect to the event for each music beat
    Zero.Connect(this.Instance, Events.MusicBeat, this.OnMusicBeat);
    // Connect to the event for each music bar
    Zero.Connect(this.Instance, Events.MusicBar, this.OnMusicBar);
    
    // Create a beat particle object 
    this.BeatParticles = this.Space.CreateAtPosition(Archetype.BeatParticles, Real3(0.0, 0.0, 1.0));
    this.BeatParticles.SphericalParticleEmitter.Active = false;
    
    // Create a bar particle object
    this.BarParticles = this.Space.CreateAtPosition(Archetype.BarParticles, Real3(0.0, 0.0, 0.0));
    this.BarParticles.SphericalParticleEmitter.Active = false;
  }
  
  function OnMusicBeat(event : SoundInstanceEvent)
  {
    this.BeatParticles.SphericalParticleEmitter.Active = true;
    
    var sequence = Actions.Sequence(this.Owner.Actions);
    Actions.Delay(sequence, 0.1);
    Actions.Call(sequence, this.StopBeatParticles);
  }
  
  function StopBeatParticles()
  {
    this.BeatParticles.SphericalParticleEmitter.Active = false;
  }
  
  function StopBarParticles()
  {
    this.BarParticles.SphericalParticleEmitter.Active = false;
  }
  
  function OnMusicBar(event : SoundInstanceEvent)
  {
    this.BarParticles.SphericalParticleEmitter.Active = true;
    
    var sequence = Actions.Sequence(this.Owner.Actions);
    Actions.Delay(sequence, 0.2);
    Actions.Call(sequence, this.StopBarParticles);
  }
}
