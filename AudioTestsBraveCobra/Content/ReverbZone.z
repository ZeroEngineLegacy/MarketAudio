/************************************************************************************************************/
/* Copyright 2016 DigiPen, All Rights Reserved                                                              */
/* Class: ReverbZone                                                                                        */
/* Brief: This script does a simple reverb interpolation based on how close the SoundListener is to the     */
/*        center of the object the script is attached to, on the X axis only. It does not handle multiple   */
/*        SoundListeners.                                                                                   */
/*                                                                                                          */
/* Author: Andrea Ellinger                                                                                  */
/************************************************************************************************************/

class ReverbZone : ZilchComponent
{
  // The object this script is attached to must have a Transform component
  [Dependency]
  var Transform : Transform;
  
  // This sets the maximum value of the ReverbNode's WetPercent property
  [Property]
  var MaxWetPercent : Real = 80.0;
  
  // A ReverbNode that will be attached to the SoundListener
  var ReverbNode : ReverbNode = Audio.ReverbNode();
  // Keeps track of whether the ReverbNode has been attached to the SoundListener
  var AddedToListener : Boolean = false;
  // Used to easily access the SoundListener's Transform component
  var ListenerTransform : Transform;
  // Stores the SoundListener's position on the last update
  var LastListenerPosition : Real3;
  // Keeps track of whether reverb is currently on or not
  var ReverbOn : Boolean = false;
  
  function Initialize(init : CogInitializer)
  {
    // Connect to the LogicUpdate function
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    // Connect to the function for when this object starts colliding with something else
    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStart);
    // Connect to the function for when this object stops colliding with something else
    Zero.Connect(this.Owner, Events.CollisionEnded, this.OnCollisionEnd);
    
    // Turn reverb off on the ReverbNode
    this.ReverbNode.WetPercent = 0.0;
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    // Check if reverb is on and the SoundListener has moved
    if (this.ReverbOn == true && this.ListenerTransform.WorldTranslation != this.LastListenerPosition)
    {
      // Get the distance between the SoundListener and this object
      var distance = this.Transform.WorldTranslation - this.ListenerTransform.WorldTranslation;
      // Set the ReverbNode's WetPercent based on the distance along the X axis
      this.ReverbNode.WetPercent = this.MaxWetPercent * (1.0 - (Math.Abs(distance.X) / this.Transform.Scale.X * 2));
      // Store the SoundListener position
      this.LastListenerPosition = this.ListenerTransform.WorldTranslation;
    }
  }
  
  function OnCollisionStart(event : CollisionEvent)
  {
    // Check if the other object has a SoundListener component
    if (event.OtherObject.SoundListener != null)
    {
      // Check if we haven't added the ReverbNode to the SoundListener yet
      if (this.AddedToListener == false)
      {
        // Insert the ReverbNode after the SoundListener's SoundNode
        event.OtherObject.SoundListener.SoundNode.InsertNodeAfter(this.ReverbNode);
        // Store the SoundListener object's Transform component
        this.ListenerTransform = event.OtherObject.Transform;
        // Mark that we've now added the ReverbNode
        this.AddedToListener = true;
      }
      
      // Store the SoundListener's position
      this.LastListenerPosition = this.ListenerTransform.WorldTranslation;
      // Turn reverb on
      this.ReverbOn = true;
    }
  }
  
  function OnCollisionEnd(event : CollisionEvent)
  {
    // Check if the other object has a SoundListener component
    if (event.OtherObject.SoundListener != null)
    {
      // Turn reverb off
      this.ReverbOn = false;
    }
  }
}

