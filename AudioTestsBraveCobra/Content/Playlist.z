/************************************************************************************************************/
/* Copyright 2016 DigiPen, All Rights Reserved                                                              */
/* Class: Playlist                                                                                          */
/* Brief: This script will play a list of SoundCues either sequentially or randomly. To stop playing, call  */
/*        Stop on the CurrentInstance. To resume, call PlayNextCue. It uses the AudioManager script to play */
/*        the music (could be modified to play through a SoundEmitter or on the SoundSpace).                */
/*                                                                                                          */
/* Author: Andrea Ellinger                                                                                  */
/************************************************************************************************************/

class Playlist : ZilchComponent
{
  [Dependency] var Manager : AudioManager;
  
  // The time (in seconds) used to cross-fade between SoundCues.
  [Property] var CrossFadeTime : Real = 0.5;
  // The number of seconds to play each SoundCue. If zero, each SoundCue will play to its end.
  [Property] var TimeToPlayEach : Real = 0.0;
  // If true the cues will play randomly, if false they will be played sequentially.
  [Property] var Randomized : Boolean = false;
  // The first SoundCue to play.
  [Property] var Cue1 : SoundCue;
  // The second SoundCue to play.
  [Property] var Cue2 : SoundCue;
  // The third SoundCue to play.
  [Property] var Cue3 : SoundCue;
  
  // An array to store all the SoundCues for easy access
  var SoundCueList : Array[SoundCue] = Array[SoundCue]();
  // The sound instance currently playing
  var CurrentInstance : SoundInstance;
  // The number of the current SoundCue
  var CurrentCueIndex : Integer = 0;
  // Used to randomly pick SoundCues
  var RandomNumbers : Random = Random();
  
  function Initialize(init : CogInitializer)
  {
    // Add the SoundCues to the array
    // NOTE -- this has to be updated if you add more SoundCue properties
    this.SoundCueList.Push(this.Cue1);
    this.SoundCueList.Push(this.Cue2);
    this.SoundCueList.Push(this.Cue3);
    
    // If randomized, pick a random cue index to start
    if (this.Randomized)
        this.CurrentCueIndex = this.RandomNumbers.RangeInclusiveMax(0, this.SoundCueList.LastIndex);
        
    // Play the first SoundCue
    this.PlayNextCue();
  }
  
  function PlayNextCue()
  {
    // Play the SoundCue, starting it paused
    //this.CurrentInstance = this.Space.SoundSpace.PlayCuePaused(this.SoundCueList[this.CurrentCueIndex]);
    this.CurrentInstance = this.Manager.PlayMusicCue(this.SoundCueList[this.CurrentCueIndex], 0.0);
    
    // Save the current volume of the SoundInstance
    //var volume = this.CurrentInstance.Volume;
    // Set its volume to zero
    //this.CurrentInstance.Volume = 0;
    // Un-pause it
    //this.CurrentInstance.Paused = false;
    // Interpolate its volume back to its original value over the cross-fade time
    //this.CurrentInstance.InterpolateVolume(volume, this.CrossFadeTime);
    this.CurrentInstance.InterpolateVolume(1.0, this.CrossFadeTime);
    
    // If there is a set time to play each cue, set the CustomEventTime to that
    if (this.TimeToPlayEach > 0)
      this.CurrentInstance.CustomEventTime = this.TimeToPlayEach;
    // Otherwise set the CustomEventTime to the point at which crossfading should start
    else
      this.CurrentInstance.CustomEventTime = this.CurrentInstance.EndTime - this.CrossFadeTime;
    
    // Connect to the custom time event for this SoundInstance
    Zero.Connect(this.CurrentInstance, Events.MusicCustomTime, this.OnTimeEvent);
  }
  
  function OnTimeEvent(event : SoundInstanceEvent)
  {
    // Are we randomly picking which SoundCue to play next?
    if (this.Randomized)
    {
      // Randomly choose an array index
      var nextCue = this.RandomNumbers.RangeInclusiveMax(0, this.SoundCueList.LastIndex);
      // Make sure it isn't the one we just played
      while (nextCue == this.CurrentCueIndex)
        nextCue = this.RandomNumbers.RangeInclusiveMax(0, this.SoundCueList.LastIndex);
      // Update the current index variable
      this.CurrentCueIndex = nextCue;
    }
    else
    {
      // Move to the next index
      ++this.CurrentCueIndex;
      // If this would be past the end of the array, go back to the beginning
      if (this.CurrentCueIndex > this.SoundCueList.LastIndex)
        this.CurrentCueIndex = 0;
    }
    
    // Fade the current SoundInstance to silence over the cross-fade time
    this.CurrentInstance.InterpolateVolume(0, this.CrossFadeTime);
    // Stop the SoundInstance after it's faded to silence
    var sequence = Actions.Sequence(this.Owner.Actions);
    Actions.Delay(sequence, this.CrossFadeTime);
    Actions.Call(sequence, this.CurrentInstance.Stop);
    
    // Play the next SoundCue
    this.PlayNextCue();
  }
}