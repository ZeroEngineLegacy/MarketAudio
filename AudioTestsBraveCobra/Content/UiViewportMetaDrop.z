[RunInEditor]
class UiViewportMetaDrop : ZilchComponent
{
  [Property] var HighlightColor : Real4 = Real4(1,0,0,1);
  
  var MouseOver : Cog;
  var HoverTime : Real;
  var Test : Integer;
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.MetaDrop, this.OnMetaDrop);
    Zero.Connect(this.Space, Events.MetaDropTest, this.OnMetaDrop);
    Zero.Connect(this.Space, Events.MetaDropUpdate, this.OnMetaDrop);
    //Zero.Connect(this.Space, Events.FrameUpdate, this.OnFrameUpdate);
  }

  function OnFrameUpdate(event : UpdateEvent)
  {
    if(this.MouseOver != null)
    {
      this.HoverTime += event.Dt;
      //Console.WriteLine(this.HoverTime);
      if(this.HoverTime > 2.0)
      {
        this.MouseOver = null;
        return;
      }
      
      // Fad the color out over a second
      var color = this.HighlightColor;
      color.W = (2.0 - this.HoverTime);
      color.W = Math.Clamp(color.W, 0, 1);
      //Console.WriteLine(color.W);
      
      var area = this.MouseOver.Area;
      
      var offset = this.MouseOver.Transform.WorldTranslation;
      var line = DebugLine();
      line.Color = color;
      //line.OnTop = true;
      this.DrawLine(line, offset, area.TopLeft, area.TopRight);
      this.DrawLine(line, offset, area.TopRight, area.BottomRight);
      this.DrawLine(line, offset, area.BottomRight, area.BottomLeft);
      this.DrawLine(line, offset, area.BottomLeft, area.TopLeft);
    }
  }
  
  function GetAttachObject(event : MetaDropEvent) : Cog
  {
    var obj = event.MouseOverObject as Cog;
    
    if(obj == null)
      return null;
    
    var rootWidget : UiWidget = null;
    
    if(obj.UiWidget != null)
      rootWidget = obj.UiWidget.Root;
    
    if(rootWidget == null)
      return null;
    
    var worldPoint = event.ViewportMouseEvent.HitPosition;
    var rootPoint = rootWidget.WorldToRoot(worldPoint);
    var hitWidget = rootWidget.Owner.UiWidget.CastPoint(rootPoint, null, false);

    //if(obj.UiLayout == null)
      //return this.GetAttachObject(obj.Parent);
        
    return obj;
  }
  
  function DrawLine(line : DebugLine, offset : Real3, start : Real2, end : Real2)
  {
    line.Start = (Real3(start, 0) + offset);
    line.End = (Real3(end, 0) + offset);
    DebugDraw.Add(line);
  }
  
  function OnMetaDrop(event : MetaDropEvent)
  {
    this.Test += 1;
    
    this.MouseOver = null;
    var archetype = event.Object as Archetype;
    if(archetype != null)
    {
      var mouseOver = this.GetAttachObject(event);
      if(mouseOver != null)
      {
        if(event.Testing)
        {
          this.MouseOver = mouseOver;
          this.HoverTime = 0.0;
          event.Result = "Attach to `mouseOver.Name`";
          
          var area = this.MouseOver.Area;
        
          var offset = this.MouseOver.Transform.WorldTranslation;
          var line = DebugLine();
          line.Color = this.HighlightColor;
          //line.OnTop = true;
          this.DrawLine(line, offset, area.TopLeft, area.TopRight);
          this.DrawLine(line, offset, area.TopRight, area.BottomRight);
          this.DrawLine(line, offset, area.BottomRight, area.BottomLeft);
          this.DrawLine(line, offset, area.BottomLeft, area.TopLeft);
          
          //Console.WriteLine("`area.TopRight` : `this.Test`");
        }
        else
        {
          var opQueue = Zero.Editor.OperationQueue;
          opQueue.BeginBatch();
          var worldPos = event.ViewportMouseEvent.ToWorldZPlane(0);
          
          var cog = this.Space.Create(archetype);
          cog.AttachToRelative(mouseOver);
          opQueue.ObjectCreated(cog);
          
          opQueue.BeginBatch();
          opQueue.SaveObjectState(cog);
          
          var rootPos = mouseOver.UiWidget.WorldToRoot(worldPos);
          var localPos = mouseOver.UiWidget.RootToLocal(rootPos);
          Console.WriteLine("Root: `rootPos` Local: `localPos`");
          cog.UiWidget.LocalTranslation = localPos;
          
          opQueue.EndBatch();
          opQueue.EndBatch();
          
          Zero.Editor.ActiveSelection.SelectOnly(cog);
          Zero.Editor.ActiveSelection.FinalSelectionChanged();
        }
        
        event.Handled = true;
      }
    }
  }
}
