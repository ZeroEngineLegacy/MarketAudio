class AudioManager : ZilchComponent
{
  
  [Property] var TagForMusic : SoundTag;
  [Property] var MusicVolume : Real = 1.0;
  
  [Property] var TagForEffects : SoundTag;
  [Property] var EffectsVolume : Real = 1.0;
  
  // The SoundTag attached to the dialog SoundCue
  [Property] var TagForDialog : SoundTag;
  [Property] var DialogVolume : Real = 1.0;
  
  // The SoundTag that will reduce volume when dialog plays
  [Property] var DuckedTag : SoundTag;
  // The volume to reduce the DuckedTag to, in decibels
  [Property] var DuckedVolumeDB : Integer = -40;
  // The time, in milliseconds, to ramp on the volume reduction
  [Property] var AttackTimeMS : Integer = 50;
  // The time, in milliseconds, to ramp off the volume reduction
  [Property] var ReleaseTimeMS : Integer = 500;
  
  function Initialize(init : CogInitializer)
  {
    this.TagForMusic.Volume = this.MusicVolume;
    
    this.TagForEffects.Volume = this.EffectsVolume;
    
    // Set the ducking relationship between the SoundTags
    this.DuckedTag.TagForDucking = this.TagForDialog;
    // Tell the ducked tag to use the compressor settings
    this.DuckedTag.UseCompressor = true;
    // Set the reduced volume
    this.DuckedTag.CompressorThreshold = this.DuckedVolumeDB;
    // Set the ramp on time
    this.DuckedTag.CompressorAttack = this.AttackTimeMS;
    // Set the ramp off time
    this.DuckedTag.CompressorRelease = this.ReleaseTimeMS;
  }
  
  function PlayMusic(cue : SoundCue, paused : Boolean) : SoundInstance
  {
    var instance = this.Space.SoundSpace.PlayCuePaused(cue);
    
    this.TagForMusic.TagSound(instance);
    
    if (paused == false)
      instance.Paused = false;
    
    return instance;
  }
  
  function PlayEffect(cue : SoundCue, emitter : SoundEmitter, paused : Boolean) : SoundInstance
  {
    var instance : SoundInstance = null;
    
    if (emitter != null)
      instance = emitter.PlayCuePaused(cue);
    else
      instance = this.Space.SoundSpace.PlayCuePaused(cue);
    
    this.TagForEffects.TagSound(instance);
    
    if (paused == false)
      instance.Paused = false;
      
    return instance;
  }
  
  function PlayDialog(cue : SoundCue, emitter : SoundEmitter, paused : Boolean) : SoundInstance
  {
    var instance : SoundInstance = null;
    
    if (emitter != null)
      instance = emitter.PlayCuePaused(cue);
    else
      instance = this.Space.SoundSpace.PlayCuePaused(cue);
    
    this.TagForDialog.TagSound(instance);
    
    if (paused == false)
      instance.Paused = false;
      
    return instance;
  }
}
