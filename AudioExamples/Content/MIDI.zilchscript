//**********************************************************************************
//
// Responds to MIDI events from the SoundSpace to play synthesized notes
// using an AdditiveSynthNode and various audio effect SoundNodes.
// It will change pitch and modulation when the appropriate messages are received.
//
//**********************************************************************************
class MIDI : ZilchComponent
{
  [Property] var Harmonic1Attack :  Real = 0.09;
  [Property] var Harmonic1Decay : Real = 0.6;
  [Property] var Harmonic1Sustain : Real = 0.0;
  [Property] var Harmonic1SusLevel : Real = 0.5;
  [Property] var Harmonic1Release : Real = 0.7;
  [Property] var Harmonic1Volume : Real = 0.5;
  [Property] var Harmonic1Type : SynthWaveType = SynthWaveType.SquareWave;
  
  // Create the AdditiveSynthNode to use for playing notes
  var Synth : AdditiveSynthNode = Audio.AdditiveSynthNode();
  // Create the LowPassNode 
  var LowPass : LowPassNode = Audio.LowPassNode();
  // Create the HighPassNode
  var HighPass : HighPassNode = Audio.HighPassNode();
  // Create the ModulationNode
  var Mod : ModulationNode = Audio.ModulationNode();
  // Create the FlangerNode
  var Flanger : FlangerNode = Audio.FlangerNode();
  // Create the PitchNode
  var Pitch : PitchNode = Audio.PitchNode();
  // The base frequency for the modulation node
  var ModFrequency : Real = 5.0;
    
  function Initialize(init : CogInitializer)
  {
    // Connect to the MIDI events sent by the SoundSpace
    Zero.Connect(this.Space.SoundSpace, Events.MIDINoteOn, this.OnNoteOn);
    Zero.Connect(this.Space.SoundSpace, Events.MIDINoteOff, this.OnNoteOff);
    Zero.Connect(this.Space.SoundSpace, Events.MIDIPitchWheel, this.OnPitch);
    Zero.Connect(this.Space.SoundSpace, Events.MIDIModWheel, this.OnMod);
    
    // Add two harmonics to the AdditiveSynthNode
    var envelope = AdsrEnvelope();
    envelope.AttackTime = 0.09;
    envelope.DecayTime = 0.6;
    envelope.SustainTime = 0.0;
    envelope.SustainLevel = 0.5;
    envelope.ReleaseTime = 0.7;
    this.Synth.AddHarmonic(1.0, 0.5, envelope, SynthWaveType.SquareWave);
    envelope.AttackTime = 0.1;
    envelope.DecayTime = 0;
    envelope.SustainTime = 0.0;
    envelope.SustainLevel = 1.0;
    envelope.ReleaseTime = 0.5;
    this.Synth.AddHarmonic(2.0, 0.5, envelope, SynthWaveType.TriangleWave);
    
    // Set the LowPassNode's cutoff frequency
    this.LowPass.CutoffFrequency = 2000.0;
    // Set the HighPassNode's cutoff frequency
    this.HighPass.CutoffFrequency = 200.0;
    // Set the values on the ModulationNode
    this.Mod.UseAmplitudeModulation = true;
    this.Mod.Frequency = this.ModFrequency;
    this.Mod.BypassPercent = 50;
    
    // Connect the AdditiveSynthNode to the ModulationNode
    this.Mod.AddInputNode(this.Synth);
    // Connect the ModulationNode to the FlangerNode
    this.Flanger.AddInputNode(this.Mod);
    // Connect the FlangerNode to the HighPassNode
    this.HighPass.AddInputNode(this.Flanger);
    // Connect the HighPassNode to the LowPassNode
    this.LowPass.AddInputNode(this.HighPass);
    // Connect the LowPassNode to the PitchNode
    this.Pitch.AddInputNode(this.LowPass);
    // Connect the PitchNode to the SoundSpace
    this.Space.SoundSpace.InputNode.AddInputNode(this.Pitch);
    
  }
  
  function OnNoteOn(event : MidiEvent)
  {
    //Console.WriteLine("Note on `event.MIDINumber` `event.Value`");
    this.Synth.NoteOn(event.MIDINumber, event.Value / 127.0);
  }
  
  function OnNoteOff(event : MidiEvent)
  {
    //Console.WriteLine("Note off `event.MIDINumber`");
    this.Synth.NoteOff(event.MIDINumber);
  }
  
  function OnPitch(event : MidiEvent)
  {
    //Console.WriteLine(event.Value);
    this.Pitch.InterpolatePitch(event.Value, 0.1);
  }
  
  function OnMod(event : MidiEvent)
  {
    //Console.WriteLine(event.Value);
    this.Mod.Frequency = this.ModFrequency + (this.ModFrequency * (event.Value / 127.0));
  }
}
