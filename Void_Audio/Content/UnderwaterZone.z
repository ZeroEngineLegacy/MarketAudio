/************************************************************************************************************/
/* Copyright 2016 DigiPen, All Rights Reserved                                                              */
/* Class: UnderwaterZone                                                                                    */
/* Brief: Simulates audio being heard underwater.                                                           */
/*                                                                                                          */
/* Author: Andrea Ellinger                                                                                  */
/************************************************************************************************************/

class UnderwaterZone : ZilchComponent
{
  [Dependency] var Random : RandomContext;
  
  var AddedToListener : Boolean = false;
  var Reverb : ReverbNode = Audio.ReverbNode();
  var LowPass : LowPassNode = Audio.LowPassNode();
  var Chorus : ChorusNode = Audio.ChorusNode();
  
  var EQ : EqualizerNode = Audio.EqualizerNode();
  var Compressor : DynamicsCompressionNode = Audio.DynamicsCompressionNode();
  
  var Up : Boolean = true;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStart);
    Zero.Connect(this.Owner, Events.CollisionEnded, this.OnCollisionEnd);

    this.Reverb.WetPercent = 20;
    this.LowPass.CutoffFrequency = 3000;
    
    this.EQ.Band1Gain = 0.5;
    this.EQ.Band2Gain = 0.4;
    this.EQ.Band3Gain = 0.5;
    this.Compressor.ThresholdDecibels = -12;
    this.Chorus.ModulationDepthPercent = 0;
    this.Chorus.BypassPercent = 100;
  }
  
  function OscillateEQ()
  {
    var time = this.Random.Range(1.0, 5.0);
    Console.WriteLine("`time`");
    if (this.Up == true)
    {
      this.Up = false;
      this.EQ.InterpolateAllBands(1.0, 0.8, 0.7, 0.8, 1.0, time);
    }
    else
    {
      this.Up = true;
      this.EQ.InterpolateAllBands(1.0, 0.5, 0.4, 0.5, 1.0, time);
    }
    
    var sequence = Actions.Sequence(this.Owner.Actions);
    Actions.Delay(sequence, time);
    Actions.Call(sequence, this.OscillateEQ);
  }
    
  function OnCollisionStart(event : CollisionEvent)
  {
    if (event.OtherObject.SoundListener != null)
    {
      if (this.AddedToListener == false)
      {
        event.OtherObject.SoundListener.SoundNode.InsertNodeAfter(this.LowPass);
        event.OtherObject.SoundListener.SoundNode.InsertNodeAfter(this.Reverb);
        event.OtherObject.SoundListener.SoundNode.InsertNodeAfter(this.Chorus);
        this.Chorus.InsertNodeAfter(this.EQ);
        this.EQ.InsertNodeAfter(this.Compressor);
        
        this.AddedToListener = true;
    
        this.OscillateEQ();
      }

      this.Chorus.BypassPercent = 0;
      this.LowPass.BypassPercent = 0;
      this.Reverb.BypassPercent = 0;
      
      this.EQ.BypassPercent = 0;
      this.Compressor.BypassPercent = 0;
    }
  }
    
  function OnCollisionEnd(event : CollisionEvent)
  {
    if (event.OtherObject.SoundListener != null)
    {
      this.Chorus.BypassPercent = 100;
      this.LowPass.BypassPercent = 100;
      this.Reverb.BypassPercent = 100;
      
      this.EQ.BypassPercent = 100;
      this.Compressor.BypassPercent = 100;
    }
  }
}
