/************************************************************************************************************/
/* Copyright 2016 DigiPen, All Rights Reserved                                                              */
/* Class: MusicStems                                                                                        */
/* Brief: Creates dynamically changing music from multiple different sound cues.                            */
/*                                                                                                          */
/* Author: Andrea Ellinger                                                                                  */
/************************************************************************************************************/

class MusicStems : ZilchComponent
{
  var SoundCueList : Array[SoundCue] = Array[SoundCue]();
  var VolumeList : Array[VolumeNode] = Array[VolumeNode]();
  var VolumeCombined : VolumeNode = Audio.VolumeNode();
  var CurrentVersion : Integer = 0;
  
  function Initialize(init : CogInitializer)
  {
    this.AddStemCue(SoundCue.Stems_Drum_1);
    this.AddStemCue(SoundCue.Stems_Drum_2);
    this.AddStemCue(SoundCue.Stems_Melody);
    this.AddStemCue(SoundCue.Stems_Harmony_1);
    this.AddStemCue(SoundCue.Stems_Harmony_2);
    this.AddStemCue(SoundCue.Stems_Metal);
    
    this.VolumeCombined.Volume = 0.8;
    
    this.SetVersion(1);

    this.Space.SoundSpace.SoundNode.AddInputNode(this.VolumeCombined);
    
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }
  
  function AddStemCue(cue : SoundCue)
  {
    this.SoundCueList.Push(cue);
    this.VolumeList.Push(Audio.VolumeNode());
    this.VolumeList[this.VolumeList.LastIndex].Volume = 0;
    this.VolumeCombined.AddInputNode(this.VolumeList[this.VolumeList.LastIndex]);
    cue.PlayCueOnNode(this.VolumeList[this.VolumeList.LastIndex], false);
  }
  
  function OnLogicUpdate(event : UpdateEvent)
  {
    var xPos = this.Owner.Transform.WorldTranslation.X;
    if (xPos < -4.0)
      this.SetVersion(1);
    else if (xPos < 0.0 && xPos >= -4.0)
      this.SetVersion(2);
    else if (xPos > 0.0 && xPos <= 4.0)
      this.SetVersion(3);
    else if (xPos > 4.0)
      this.SetVersion(4);
  }
  
  function SetVersion(version : Integer)
  {
    if (version == this.CurrentVersion)
      return;
      
    this.CurrentVersion = version;
    
    var interpolateTime = 1.0;
    
    if (version == 1)
    {
      this.VolumeList[0].InterpolateVolume(0.7, interpolateTime);
      this.VolumeList[1].InterpolateVolume(0.0, interpolateTime);
      this.VolumeList[2].InterpolateVolume(0.0, interpolateTime);
      this.VolumeList[3].InterpolateVolume(1.0, interpolateTime);
      this.VolumeList[4].InterpolateVolume(0.0, interpolateTime);
      this.VolumeList[5].InterpolateVolume(0.0, interpolateTime);
    }
    else if (version == 2)
    {
      this.VolumeList[0].InterpolateVolume(1.0, interpolateTime);
      this.VolumeList[1].InterpolateVolume(0.0, interpolateTime);
      this.VolumeList[2].InterpolateVolume(0.6, interpolateTime);
      this.VolumeList[3].InterpolateVolume(0.8, interpolateTime);
      this.VolumeList[4].InterpolateVolume(0.0, interpolateTime);
      this.VolumeList[5].InterpolateVolume(0.0, interpolateTime);
    }
    else if (version == 3)
    {
      this.VolumeList[0].InterpolateVolume(0.0, interpolateTime);
      this.VolumeList[1].InterpolateVolume(0.8, interpolateTime);
      this.VolumeList[2].InterpolateVolume(1.0, interpolateTime);
      this.VolumeList[3].InterpolateVolume(0.6, interpolateTime);
      this.VolumeList[4].InterpolateVolume(1.0, interpolateTime);
      this.VolumeList[5].InterpolateVolume(0.0, interpolateTime);
    }
    else if (version == 4)
    {
      this.VolumeList[0].InterpolateVolume(0.0, interpolateTime);
      this.VolumeList[1].InterpolateVolume(1.0, interpolateTime);
      this.VolumeList[2].InterpolateVolume(0.6, interpolateTime);
      this.VolumeList[3].InterpolateVolume(0.5, interpolateTime);
      this.VolumeList[4].InterpolateVolume(0.7, interpolateTime);
      this.VolumeList[5].InterpolateVolume(1.0, interpolateTime);
    }
  }
}
