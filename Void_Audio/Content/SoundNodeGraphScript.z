/************************************************************************************************************/
/* Copyright 2016 DigiPen, All Rights Reserved                                                              */
/* Class: SoundNodeGraphScript                                                                              */
/* Brief: Logic for generating the SoundNodeGraph.                                                          */
/*                                                                                                          */
/* Author: Andrea Ellinger                                                                                  */
/************************************************************************************************************/

class SoundNodeGraphScript : ZilchComponent
{
    [Property]
    var Graph : CogPath;
    
    [Property]
    var ResetButton : CogPath;
    
    [Property]
    var ToggleButton : CogPath;
    
    var ObjectList : Array[Cog] = Array[Cog]();
    
    var PerFrameRefresh : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.ResetButton.Cog, Events.UiButtonClicked, this.OnButtonClick);
        Zero.Connect(this.ToggleButton.Cog, Events.UiButtonClicked, this.OnToggleClick);
        Zero.Connect(this.Space, Events.FrameUpdate, this.OnFrameUpdate);
    }
    
    function OnButtonClick(event : UiButtonEvent)
    {
      this.RefreshGraph();
    }
    
    function OnToggleClick(event : UiButtonEvent)
    {
      this.PerFrameRefresh = !this.PerFrameRefresh;
    }
    
    function OnFrameUpdate(event : UpdateEvent)
    {
      if (this.PerFrameRefresh)
      {
        this.RefreshGraph();
      }
    }
    
    function RefreshGraph()
    {
      // Remove any existing node objects
      foreach(var object in this.ObjectList)
      {
        object.Destroy();
      }
      
      this.ObjectList.Clear();
      
      foreach(var info in Audio.GetNodeGraphInfo())
      {
          var thisPosition = Real3(info.Position.X, info.Position.Y, 0);
          
          var color = Real4(105.0/255.0, 178.0/255.0, 255.0/255.0, 1.0);
          
          if (info.Name == "Space")
          {
            color = Real4(255.0/255.0, 62.0/255.0, 63.0/255.0, 1.0);
          }
          else if (info.Name == "Listener")
          {
            color = Real4(171.0/255.0, 105.0/255.0, 255.0/255.0, 1.0);
          }
          else if (info.Name == "Emitter")
          {
            color = Real4(46.0/255.0, 170.0/255.0, 43.0/255.0, 1.0);
          }
          else if (info.Name == "SoundInstance")
          {
            color = Real4(255.0/255.0, 167.0/255.0, 75.0/255.0, 1.0);
          }
          else if (info.Name == "EmitterAttenuator")
          {
            color = Real4(155.0/255.0, 255.0/255.0, 120.0/255.0, 1.0);
          }
          else if (info.Name == "CueAttenuator")
          {
            color = Real4(254.0/255.0, 236.0/255.0, 117.0/255.0, 1.0);
          }
          
          var node = this.Space.CreateAtPosition(Archetype.Find("SoundNodeIcon"), thisPosition);
          node.FindChildByName("CircleHighlight").UiWidget.LocalColor = color;
          node.FindChildByName("BoxHighlight").UiWidget.LocalColor = color;
          node.FindChildByName("Text").SpriteText.Text = info.Name;
          node.AttachTo(this.Graph.Cog);
          
          this.ObjectList.Push(node);
          
          // Add the connection lines
          foreach(var otherInfo in info.Connections)
          {
            var otherPosition = Real3(otherInfo.Position.X, otherInfo.Position.Y + 47, 0);
            var distance = thisPosition - otherPosition;
            var lineArchetype = "Line";
            var linePosition = thisPosition + otherPosition;
            linePosition = linePosition * 0.5;
            
            if (info.HasOutput == true)
            {
              lineArchetype = "ActiveLine";
            }
            
            var line = this.Space.CreateAtPosition(
              Archetype.Find("NodeLine"), thisPosition + Real3(0,-23,0)
            );
            
            if (info.HasOutput == true)
            {
              line.UiWidget.LocalColor = Real4(232.0/255.0, 125.0/255.0, 0.0, 1.0);
            }
            
            line.AttachTo(this.Graph.Cog);
            this.ObjectList.Push(line);
            
            line.Transform.Scale = Real3(1,Math.Distance(thisPosition, otherPosition),1);
            line.Transform.RotateAnglesWorld(Real3(0.0,0.0, -Math.ATan2(distance.X, distance.Y)));
          }
      }
    }
}
