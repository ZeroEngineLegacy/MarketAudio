[RunInEditor]
class UiBasicRenderer : ZilchComponent
{
  [Property] var ClearColor : Real4 = Real4(0, 0, 0, 1);
  [Property] var DrawDebug : Boolean = false;
  [Property] var DrawOpaque : Boolean = false;
  [Property] var DrawAlphaBlend : Boolean = false;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Owner, Events.RenderTasksUpdate, this.OnRenderTasksUpdate);
  }
  
  function RenderUi(event : RenderTasksEvent, color : RenderTarget, depth : RenderTarget)
  {
    // Find all root widgets
    foreach(var root in this.Space.AllObjects())
    {
      if(root.UiRootWidget != null)
      {
        root.UiFillViewport.Fill();
        
        // Update layouts before rendering
        root.UiRootWidget.Update();
        
        if(root.UiRenderer != null)
          root.UiRenderer.Render(event, color, depth, DefaultRenderPass());
      }
    }
  }

  function OnRenderTasksUpdate(event : RenderTasksEvent)
  {
      var size = event.GetViewportSize();
      var color = event.GetFinalTarget(size, TextureFormat.RGB8);
      var depth = event.GetRenderTarget(size, TextureFormat.Depth24Stencil8);
      
      event.AddRenderTaskClearTarget(color, depth, this.ClearColor, 1.0, 0);
      
      // Settings used to render opaque objects
      var opaqueSettings = RenderSettings() {CullMode = CullMode.BackFace};
      opaqueSettings.SetDepthWrite(DepthTest.LessEqual);
      
      // Settings used to render alpha objects
      var alphaSettings = RenderSettings();
      alphaSettings.SetDepthRead(DepthTest.LessEqual);
      alphaSettings.SetBlendAlpha();
      
      var renderPass = DefaultRenderPass();
      
      // Render opaque objects
      if(this.DrawOpaque)
        event.AddRenderTaskRenderPass(color, depth, opaqueSettings, RenderGroup.DefaultRenderGroup, renderPass);
      
      // Render alpha blended objects (Sprites, Particles, etc..)
      if(this.DrawAlphaBlend)
        event.AddRenderTaskRenderPass(color, depth, alphaSettings, RenderGroup.AlphaBlend, renderPass);
      
      // Render debug draw
      if (this.DrawDebug)
          event.AddRenderTaskRenderPass(color, depth, alphaSettings, RenderGroup.DebugDraw, renderPass);
      
      // Render the Ui
      this.RenderUi(event, color, depth);
      
      if (this.DrawDebug)
      {
          event.AddRenderTaskRenderPass(color, depth, alphaSettings, RenderGroup.DebugDraw, renderPass);
          event.AddRenderTaskRenderPass(color, depth, RenderSettings(), RenderGroup.DebugDrawOnTop, renderPass);
      }
  }
}
