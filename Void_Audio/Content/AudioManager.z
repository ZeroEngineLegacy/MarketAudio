/************************************************************************************************************/
/* Copyright 2016 DigiPen, All Rights Reserved                                                              */
/* Class: AudioManager                                                                                      */
/* Brief: The AudioManager fades in and out multiple audio tags (busses) based on dialogue being played.    */
/*                                                                                                          */
/* Author: Andrea Ellinger                                                                                  */
/************************************************************************************************************/

class AudioManager : ZilchComponent
{
  // The SoundTag to use for music
  [Property] var MusicTag : SoundTag;
  // The SoundTag to use for effects
  [Property] var EffectTag : SoundTag;
  // The maximum number of effect cues that should play at any one time
  [Property] var EffectsLimit : Integer = 50;
  // The SoundTag to use for dialog
  [Property] var DialogTag : SoundTag;
  // The maximum number of dialog cues that should play at any one time
  [Property] var DialogLimit : Integer = 10;
  // The time (in seconds) for the volume to reduce 
  [Property] var FadeInTime : Real = 0.1;
  // The time (in seconds) for the volume to go back to full
  [Property] var FadeOutTime : Real = 0.5;
  // The minimum volume reached when the SoundTag is ducked
  [Property] var DuckedVolume : Real = 1.0;
  // The minimum volume for the low EQ band
  [Property] var DuckedLowPass : Real = 1.0;
  // The minimum volume for the first EQ band
  [Property] var DuckedBand1 : Real = 1.0;
  // The minimum volume for the second EQ band
  [Property] var DuckedBand2 : Real = 1.0;
  // The minimum volume for the third EQ band
  [Property] var DuckedBand3 : Real = 1.0;
  // The minimum volume for the high EQ band
  [Property] var DuckedHighPass : Real = 1.0;
  
  
  var MaxVolume : Real;
  
  var Ducked : Boolean = false;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.DialogTag, Events.TagHasNoInstances, this.OnTagNoInstances);
    
    this.MaxVolume = this.MusicTag.Volume;
  }
  
  function OnTagNoInstances(event : SoundEvent)
  {
    // If currently ducking, stop
    if (this.Ducked)
    {
      // Set the variable which tracks if we're ducked
      this.Ducked = false;
      // Set the SoundTag's volume back to full over the FadeOutTime
      this.MusicTag.InterpolateVolume(this.MaxVolume, this.FadeOutTime);
      // Set the EQ bands back to full volume over the FadeOutTime
      this.MusicTag.EQSetAllBands(1.0, 1.0, 1.0, 1.0, 1.0, this.FadeOutTime);
    }
  }
  
  function PlayMusicCue(cue : SoundCue, volume : Real) : SoundInstance
  {
    var instance = this.Space.SoundSpace.PlayCuePaused(cue);
    if (instance != null)
    {
      instance.Volume = volume;
      this.MusicTag.TagSound(instance);
      instance.Paused = false;
    }
    
    return instance;
  }
  
  function PlayEffectCue(cue : SoundCue, emitter : SoundEmitter, volume : Real) : SoundInstance
  {
    var instance : SoundInstance = null;
    
    if (this.EffectTag.InstanceCount < this.EffectsLimit)
    {
      if (emitter != null)
        instance = emitter.PlayCuePaused(cue);
      else
        instance = this.Space.SoundSpace.PlayCuePaused(cue);
        
      if (instance != null)
      {
        instance.Volume = volume;
        this.EffectTag.TagSound(instance);
        instance.Paused = false;
      }
      
    }
    
    return instance;
  }
  
  function PlayDialogCue(cue : SoundCue, emitter : SoundEmitter, volume : Real) : SoundInstance
  {
    var instance : SoundInstance = null;
    
    if (this.DialogTag.InstanceCount < this.DialogLimit)
    {
      if (emitter != null)
        instance = emitter.PlayCuePaused(cue);
      else
        instance = this.Space.SoundSpace.PlayCuePaused(cue);
        
      if (instance != null)
      {
        instance.Volume = volume;
        this.DialogTag.TagSound(instance);
        instance.Paused = false;
      
        // If not currently ducked, start ducking
        if (!this.Ducked)
        {
          // Set the variable which tracks if we're ducked
          this.Ducked = true;
          // Set the SoundTag's volume over the FadeInTime
          this.MusicTag.InterpolateVolume(this.DuckedVolume, this.FadeInTime);
          // Set the EQ bands over the FadeInTime
          this.MusicTag.EQSetAllBands(this.DuckedLowPass, this.DuckedBand1, this.DuckedBand2, 
            this.DuckedBand3, this.DuckedHighPass, this.FadeInTime);
        }
      }
    }
    
    return instance;
  }
}
 